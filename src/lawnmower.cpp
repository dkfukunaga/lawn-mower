

#include "lawndriver.h"
#include <random>
#include <time.h>
#include <memory>
#include <iostream>
#include <windows.h>
#include <cstdlib>  // For std::stoi
#include <getopt.h> // For getopt
#include <algorithm> // For std::remove


int main(int argc, char* argv[]) {

    srand(time(NULL));

    // default to randomly sized lawn ranging from 7x7 to 22x22
    int height = rand() % 15 + 7;
    int width = rand() % 15 + 7;

    // command line argument code generated by chatgpt
    int opt;
    while ((opt = getopt(argc, argv, "w:h:s:")) != -1) {
        switch (opt) {
            case 'w':
                width = std::stoi(optarg);
                break;
            case 'h':
                height = std::stoi(optarg);
                break;
            case 's': {
                std::string size(optarg);

                // Clean input (remove spaces)
                size.erase(remove(size.begin(), size.end(), ' '), size.end());

                // Ensure format is strictly "WxH"
                size_t x_pos = size.find('x');
                if (x_pos != std::string::npos && x_pos > 0 && x_pos < size.length() - 1) {
                    width = std::stoi(size.substr(0, x_pos));
                    height = std::stoi(size.substr(x_pos + 1));
                } else {
                    std::cerr << "Invalid size format. Use -s WxH (e.g., -s 12x15)." << std::endl;
                    return 1;
                }
                break;
            }
            default:
                std::cerr << "Usage: " << argv[0] << " [-w width] [-h height] [-s WxH]" << std::endl;
                return 1;
        }
    }

    system("cls");
    std::cout << "\nLawn size: " << width << "x" << height << "\n" << std::endl;
    system("pause");

    // start LawnDriver and display program

    std::unique_ptr<Lawn> lawn = std::make_unique<Lawn>(width, height);
    std::unique_ptr<Mower> mower = std::make_unique<Mower>(*lawn);
    std::unique_ptr<LawnDriver> driver = std::make_unique<LawnDriver>(*lawn, *mower);

    driver->start();

    // orient mower north
    if (driver->peek() == SquareType::unmowed) {
        driver->turnLeft();
        while (driver->peek() != SquareType::wall) {
            driver->turnLeft();
        }
        driver->turnRight();
    } else {
        while (driver->peek() != SquareType::unmowed) {
            driver->turnRight();
        }
    }

    int height_count = 0;
    int width_count = 0;

    while (driver->peek() != SquareType::wall) {
        driver->forward();
        height_count++;
    }
    driver->turnRight();
    while (driver->peek() != SquareType::wall) {
        driver->forward();
        width_count++;
    }

    // height_count--;
    // width_count--;

    // for (int i = 0; i < width_count; i += 2) {
    //     for (int j = 0; j < height_count; ++j) {
    //         driver->forward();
    //     }
    //     driver->turnRight();
    //     driver->forward();
    //     driver->turnRight();
    //     for (int j = 0; j < height_count; ++j) {
    //         driver->forward();
    //     }
    //     driver->turnLeft();
    //     driver->forward();
    //     driver->turnLeft();
    // }

    height_count++;     // adding one to ensure we go the entire height on the first loop

    while (--height_count > 0 && --width_count > 0) {
        driver->turnRight();
        for (int i = 0; i < height_count; ++i) {
            driver->forward();
        }
        driver->turnRight();
        for (int i = 0; i < width_count; ++i) {
            driver->forward();
        }
    }

    // int leftover = (height_count > 0 ? height_count : width_count);

    // for (int i = 0; i < leftover; ++i) {
    //     driver->forward();
    // }

    return 0;
  }



