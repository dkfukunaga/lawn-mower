
#include "lawnDisplay.h"

/***** CONSTRUCTORS *****/

LawnDisplay::LawnDisplay() {
    _mower = new Mower();
    _lawn = _mower->getLawn();
}

LawnDisplay::LawnDisplay(Mower *mower) {
    _mower = mower;
    _lawn = _mower->getLawn();
}

LawnDisplay::LawnDisplay(Lawn *lawn) {
    _lawn = lawn;
    _mower = new Mower(_lawn);
}

/***** GETTERS/ACCESSORS *****/

int* LawnDisplay::getMarginOffsets() { return _margin_offsets; }
int* LawnDisplay::getTitleOffsets() { return _title_offsets; }
int* LawnDisplay::getLawnOffsets() { return _lawn_offsets; }
int* LawnDisplay::getStatsOffsets() { return _stats_offsets; }
LawnPos LawnDisplay::getLawnPosition() {
    // adjust for side margin
    int x = (_cursor_position.x - _margin_offsets[0]);

    // adjust for square width
    x = x / _square_dimension[0];

    // adjust for top margin, title, and title offset
    // assumes title is 1 line
    int y = _cursor_position.y - _margin_offsets[1] - _title_offsets[1] - 1;

    // adjust for lawn y axis being reversed
    y = _lawn->getHeight() - y;

    return LawnPos(x, y);
}

/***** SETTERS/MUTATORS *****/

// set margin offsets from top and left side of console
void LawnDisplay::setMarginOffsets(int x_margin,int  y_margin) {
    _margin_offsets[0] = x_margin;
    _margin_offsets[1] = y_margin;
}

// set title offsets from border, border
void LawnDisplay::setTitleOffsets(int x_margin,int  y_margin) {
    _title_offsets[0] = x_margin;
    _title_offsets[1] = y_margin;
}

// set lawn offsets from border, title
void LawnDisplay::setLawnOffsets(int x_margin,int  y_margin) {
    _lawn_offsets[0] = x_margin;
    _lawn_offsets[1] = y_margin;
}

// set stats offsets from border, lawn
void LawnDisplay::setStatsOffsetsint(int x_margin,int  y_margin) {
    _stats_offsets[0] = x_margin;
    _stats_offsets[1] = y_margin;
}

/***** PUBLIC FUNCTIONS *****/



/***** PRIVATE PRFUNCTIONS *****/



/***** PRIVATE CURSOR FUNCTIONS *****/

// moves cursor to provided position
// (0,0) is the top left corner, not including margins
void LawnDisplay::moveCursor(Position position) {
    std::cout << "\033[" 
              << std::to_string(position.y + _margin_offsets[1])
              << ";"
              << std::to_string(position.x  + (_margin_offsets[0] * 2))
              << "H";
}

// saves cursor position using ANSI escape code
void LawnDisplay::saveCursorPosition() { std::cout << "\033[s"; }

// restores saved cursor position using ANSI escape code
void LawnDisplay::restoreCursorPosition() { std::cout << "\033[u"; }

// hide cursor in command prompt/terminal
// code generated by ChatGPT
void LawnDisplay::hideCursor() {
    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO cursorInfo;
    GetConsoleCursorInfo(consoleHandle, &cursorInfo);
    cursorInfo.bVisible = false; // Set cursor visibility to false
    SetConsoleCursorInfo(consoleHandle, &cursorInfo);
}

// show cursor in command prompt/terminal
// code generated by ChatGPT
void LawnDisplay::showCursor() {
    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO cursorInfo;
    GetConsoleCursorInfo(consoleHandle, &cursorInfo);
    cursorInfo.bVisible = true; // Set cursor visibility to true
    SetConsoleCursorInfo(consoleHandle, &cursorInfo);
}

/***** PRIVATE HELPER FUNCTIONS *****/

Position LawnDisplay::convertLawnPosition(LawnPos lawn_position) {
    int x = lawn_position.x;
    int y = lawn_position.y;

    // adjust for square width
    x = x * _square_dimension[0];

    // adjust for side margin
    x = x + _margin_offsets[0];

    // adjust for lawn y axis being reversed
    y = _lawn->getHeight() - y;

    // adjust for top margin, title, and title offset
    // assumes title is 1 line
    y = y + _title_offsets[1] + 1 + _margin_offsets[1];

    return Position(x, y);
}