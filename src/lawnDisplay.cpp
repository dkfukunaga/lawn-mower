
#include "lawnDisplay.h"

/***** STATIC CONSTANTS *****/

const int LawnDisplay::_default_margin_offsets[]  = {8, 4};
const int LawnDisplay::_default_title_offsest[] = {0, 2};
const int LawnDisplay::_default_lawn_offsets[]  = {0, 3};
const int LawnDisplay::_default_stats_offsets[] = {0, 3};
const int LawnDisplay::_square_dimensions[]     = {2, 1};

/***** CONSTRUCTORS *****/

LawnDisplay::LawnDisplay(int x_margin = _default_margin_offsets[0],
                         int y_margin = _default_margin_offsets[0]) {
    _mower = new Mower();
    _lawn = _mower->getLawn();
    setMargins(x_margin, y_margin);
}

LawnDisplay::LawnDisplay(Mower *mower,
                         int x_margin = _default_margin_offsets[0],
                         int y_margin = _default_margin_offsets[0]) {
    _mower = mower;
    _lawn = _mower->getLawn();
    setMargins(x_margin, y_margin);
}

LawnDisplay::LawnDisplay(Lawn *lawn,
                         int x_margin = _default_margin_offsets[0],
                         int y_margin = _default_margin_offsets[0]) {
    _lawn = lawn;
    _mower = new Mower(_lawn);
    setMargins(x_margin, y_margin);
}

/***** GETTERS/ACCESSORS *****/

int* LawnDisplay::getMargins() { return _margin_offsets; }

/***** SETTERS/MUTATORS *****/

void LawnDisplay::setMargins(int x_margin, int y_margin) {
    _margin_offsets[0] = x_margin;
    _margin_offsets[1] = y_margin;
}

/***** PUBLIC FUNCTIONS *****/



/***** PRIVATE PRINT FUNCTIONS *****/



/***** PRIVATE CURSOR FUNCTIONS *****/

// moves cursor to provided position
// (0,0) is the top left corner, not including margins
void LawnDisplay::moveCursor(Position position) {
    std::cout << "\033[" 
              << std::to_string(position.y + _margin_offsets[1])
              << ";"
              << std::to_string(position.x  + (_margin_offsets[0] * 2))
              << "H";
}

// saves cursor position using ANSI escape code
void LawnDisplay::saveCursorPosition() { std::cout << "\033[s"; }

// restores saved cursor position using ANSI escape code
void LawnDisplay::restoreCursorPosition() { std::cout << "\033[u"; }

// hide cursor in command prompt/terminal
// code generated by ChatGPT
void LawnDisplay::hideCursor() {
    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO cursorInfo;
    GetConsoleCursorInfo(consoleHandle, &cursorInfo);
    cursorInfo.bVisible = false; // Set cursor visibility to false
    SetConsoleCursorInfo(consoleHandle, &cursorInfo);
}

// show cursor in command prompt/terminal
// code generated by ChatGPT
void LawnDisplay::showCursor() {
    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO cursorInfo;
    GetConsoleCursorInfo(consoleHandle, &cursorInfo);
    cursorInfo.bVisible = true; // Set cursor visibility to true
    SetConsoleCursorInfo(consoleHandle, &cursorInfo);
}